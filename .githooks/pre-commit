#!/bin/sh

echo "üîç Running SwiftLint on staged files..."

# Check if we're in a Swift package directory
if [ ! -f "Package.swift" ]; then
    echo "‚ùå Not in a Swift package directory. Package.swift not found."
    exit 1
fi

# Check if SwiftLint is available via Swift Package Manager
if ! swift package describe --type json | grep -q "SwiftLint"; then
    echo "‚ùå SwiftLint not found in Package.swift dependencies!"
    echo ""
    echo "   Add SwiftLint to your Package.swift:"
    echo "   .package(url: \"https://github.com/realm/SwiftLint.git\", from: \"0.59.1\")"
    echo ""
    exit 1
fi

echo "‚úÖ Found SwiftLint via Swift Package Manager"

# Get staged Swift files
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.swift$')

# If no Swift files are staged, exit successfully
if [ -z "$staged_files" ]; then
    echo "No Swift files staged for commit."
    exit 0
fi

# Flag to track if linting fails
lint_failed=0

# Run SwiftLint only on staged files
while IFS= read -r file; do
    if [ -f "$file" ]; then
        # Automatically fix issues where possible
        swift run swiftlint autocorrect "$file"
        
        # Re-stage the modified file
        git add "$file"

        # Run SwiftLint linting on the file
        swift run swiftlint lint "$file" --quiet
        lint_status=$?

        # If SwiftLint found issues, print them and set failure flag
        if [ $lint_status -ne 0 ]; then
            echo "‚ùå SwiftLint found violations in $file. Fix them before committing."
            lint_failed=1
        fi
    fi
done <<< "$staged_files"

# If any file failed linting, block the commit
if [ $lint_failed -ne 0 ]; then
    echo "üö® Commit blocked due to SwiftLint violations!"
    exit 1
fi

echo "‚úÖ SwiftLint passed!"
exit 0